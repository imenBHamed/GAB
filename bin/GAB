#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'GAB'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/GAB` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/GAB now"
  exit 64
end

include GLI::App

program_desc 'Simulation d'' guichet automatique de banque. Cette application aide le client à gérer son compte bancaire en effectuant des dépots ou des retraits d''argent ainsi que la modification des paramêtres de son compte. Quant à l''administrateur, celui-ci sera capable de créer et de supprimer les comptes des clients.'

version GAB::VERSION

subcommand_option_handling :normal
arguments :strict

desc ''
switch [:s,:switch]

desc 'Exécution en ajoutant les données dans le fichier'
default_value '/home/gg191011/GAB/bin/db.txt'
arg_name 'file_db'
flag [:f,:file]

desc 'ajout d''un compte utilisateur de la part de l''administrateur seulement'
arg_name 'nom_client identifiant_client pwd_client identifiant_admin pwd_admin'
command :creer_compte do |c|
  c.desc 'Describe a switch to CreerCompte'
  c.switch :s
  c.desc 'Describe a flag to CreerCompte'
  c.default_value 'default'
  
  c.action do |global_options,options,args|
     # args = [STDIN] if args.empty?
      db_file = global_options[:f]
      nom_client= args.shift
      identifiant_client= args.shift
      pwd_client= args.shift
      identifiant_admin= args.shift
      pwd_admin= args.shift
      administrateur= identifiant_admin << "/" << pwd_admin
      utilisateur=identifiant_client << "/" << pwd_client << "/" << nom_client 
      ligne = File.open(db_file, "a")
if `#{"grep -n #{administrateur} #{db_file}"}`.to_i>0 then
  if `#{"grep -n #{utilisateur} #{db_file}"}`.to_i==0 then
    nouveauCompte= utilisateur << "/" <<  administrateur
ligne.puts "\r"+ nouveauCompte
puts "Votre compte a été enregistré avec succès dans la base de données"
  else
    puts "utilisateur deja existe dans la base de donnees"
  end

end
      
  end
  end


desc 'Supprimer un compte d''un utilisateur, seul l''adminisrtateur peut le faire'
arg_name 'identifiant_compte identifiant_admin pwd_admin'
command :supprimer_compte do |c|
  
  c.action do |global_options,options,args|
   
      identifiant_client= args.shift
      identifiant_admin= args.shift
      pwd_admin= args.shift
    puts "votre compte a été supprimé!"
  end
end

desc 'La supression definitive garantie une supression de tous les bases de donnees, cette commande est realisee par l''administrateur '
arg_name 'identifiant_client identifiant_admin pwd_admin'
command :supprimer_compte_definitive do |c|
  c.action do |global_options,options,args|
    
      identifiant_client= args.shift
      identifiant_admin= args.shift
      pwd_admin= args.shift
      
    puts "Votre compte a été supprimé définitivement"
  end
end

desc 'Le client peut modifier les paramètres de son compte'
arg_name 'identifiant_client pwd_client'
command :modifier_compte do |c|
  c.action do |global_options,options,args|
    
      identifiant_client= args.shift
      pwd_client= args.shift
      
    puts "Vous avez modifié votre compte!"
  end
end

desc 'Le client peut consulter son compte pour connaitre sa balance'
arg_name 'identifiant_client pwd_client'
command :consulter_compte do |c|
  c.action do |global_options,options,args|
      db_file = global_options[:file]
      identifiant_client= args.shift
      pwd_client= args.shift
      
      ligne = File.open(db_file, "r").readlines
      utilisateur= identifiant_client+"/"+pwd_client
      exist= `#{"grep -n #{utilisateur} #{db_file}"}`

       if exist[0].to_i > 0 then
	 
	   montant =  ligne[exist[/[ A-Za-z0-9]*:/][/[0-9]+/].to_i-1][/-[ A-Za-z0-9]*/][/[0-9]+/]
	   puts "votre compte contient:#{montant}$"
	  
       else
	 
	 puts "identifiant et password sont invalides"
       end
  end
end

desc 'Le client ajoute une somme d''argent à son compte'
arg_name 'identifiant_client pwd_client montant'
command :deposer_argent do |c|

  c.action do |global_options,options,args|
      identifiant_client= args.shift
      pwd_client= args.shift
      montant= args.shift
    puts "DeposerArgent command ran"
  end
end

desc 'Lorsque le client retire une somme d''argent, le montant dans son compte diminue de cette somme'
arg_name 'identifiant_client pwd_client montant'
command :retirer_argent do |c|
  
  c.action do |global_options,options,args|
     identifiant_client= args.shift
      pwd_client= args.shift
      montant= args.shift
    puts "Retirer_argent command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
