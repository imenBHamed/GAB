#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'GAB'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/GAB` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/GAB now"
  exit 64
end

include GLI::App

program_desc 'Simulation d'' guichet automatique de banque. Cette application aide le client à gerer son compte bancaire en effectuant des depots ou des retraits d''argent ainsi que la modification des parametres de son compte. Quant à l''administrateur, celui-ci sera capable de creer et de supprimer les comptes des clients.'

version GAB::VERSION

subcommand_option_handling :normal
arguments :strict

desc ''
switch [:s,:switch]

desc 'Exécution en ajoutant les données dans le fichier'
default_value 'bin/db.txt'
arg_name 'file_db'
flag [:f,:file]

desc 'Ajout d''un compte utilisateur de la part de l''administrateur seulement'
arg_name 'identifiant_client pwd_client nom_client identifiant_admin pwd_admin'
command :creer_compte do |c|
  c.desc 'Describe a switch to CreerCompte'
  c.switch :s
  c.desc 'Describe a flag to CreerCompte'
  c.default_value 'default'
  
  c.action do |global_options,options,args|
     # args = [STDIN] if args.empty?
      db_file = global_options[:f]
      nom_client= args.shift
      identifiant_client= args.shift
      pwd_client= args.shift
      identifiant_admin= args.shift
      pwd_admin= args.shift
      administrateur= identifiant_admin << "/" << pwd_admin
      utilisateur=identifiant_client << "/" << pwd_client << "/" << nom_client 
      ligne = File.open(db_file, "a")

      resultat=GAB.creer(utilisateur,administrateur,ligne,db_file)
      puts resultat
   

  end
  end


desc 'Supprimer un compte d''un utilisateur, seul l''adminisrtateur peut le faire'
arg_name 'identifiant_client identifiant_admin pwd_admin'
command :supprimer_compte do |c|
  
  c.action do |global_options,options,args|
      db_file = global_options[:file]
      identifiant_client= args.shift
      identifiant_admin= args.shift
      pwd_admin= args.shift
      administrateur= identifiant_admin << "/" << pwd_admin
      resultat= GAB.supprimer(identifiant_client, administrateur,db_file)
      puts resultat
     
  
  end
end


desc 'Le client peut modifier les parametres de son compte'
arg_name 'identifiant_client pwd_client nouveau_pwd_client'
command :modifier_compte do |c|
  c.action do |global_options,options,args|
      db_file = global_options[:file]
      identifiant_client= args.shift
      pwd_client= args.shift
      nouveau_pwd_client= args.shift
 resultat=GAB.modifier(db_file,identifiant_client,pwd_client, nouveau_pwd_client)
 puts resultat    

  end
end

desc 'Le client peut consulter son compte pour connaitre sa balance'
arg_name 'identifiant_client pwd_client'
command :consulter_compte do |c|
  c.action do |global_options,options,args|
      db_file = global_options[:file]
      identifiant_client= args.shift
      pwd_client= args.shift
      
      ligne = File.open(db_file, "r").readlines
      utilisateur= identifiant_client+"/"+pwd_client

    resultat=GAB.consulter(utilisateur,ligne,db_file)
    puts resultat
 


  end
end

desc 'Le client ajoute une somme d''argent à son compte'
arg_name 'identifiant_client pwd_client montant'
command :deposer_argent do |c|

      c.action do |global_options,options,args|

      db_file = global_options[:file]
      identifiant_client= args.shift
      pwd_client= args.shift
      montant= args.shift
      

      utilisateur= identifiant_client+"/"+pwd_client
      
      if montant.to_i>0 then
    GAB.deposer(utilisateur, db_file,montant)
      else
	puts "montant insuffisant"
      end
     


  end
end


desc 'Lorsque le client retire une somme d''argent, le montant dans son compte diminue de cette somme'
arg_name 'identifiant_client pwd_client montant'
command :retirer_argent do |c|
  
  c.action do |global_options,options,args|
      db_file = global_options[:file]
      identifiant_client= args.shift
      pwd_client= args.shift
      montant= args.shift
      
      ligne = File.open(db_file, "a+").readlines
      utilisateur= identifiant_client+"/"+pwd_client
      
   GAB.retirer(utilisateur, db_file,montant,ligne)
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
